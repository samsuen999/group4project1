
## which product was ordered the most (Simple)

SELECT product_name, quantity
FROM `order details` JOIN  Product on `order details`. product_id = Product.Product_id
ORDER BY quantity DESC; 


##How many orders were received in each day (Simple)
SELECT count(order_id)
FROM  `Order`
Group by order_date;


##Check daily sales performance (Simple)
SELECT T.transaction_date, SUM(T.amount_paid) AS daily_sales
FROM Transaction T
GROUP BY T.transaction_date
ORDER BY T.transaction_date DESC;


#Total revenue for each of the payment types (Simple)
SELECT T.payment_method, SUM(T.amount_paid) AS total_revenue
FROM Transaction T
GROUP BY T.payment_method
ORDER BY total_revenue DESC;


## Query to find the average transaction amount per payment method for customers who spent more than $20:
## Complex

SELECT t.payment_method, AVG(t.amount_paid) AS avg_transaction_amount
FROM Transaction t
WHERE t.customer_id IN (
    SELECT c.customer_id
    FROM Customer c
    JOIN `Order` o ON c.customer_id = o.customer_id
    JOIN `order details` od ON o.order_id = od.order_id
    GROUP BY c.customer_id
    HAVING SUM(od.total_price * od.quantity) > 20
)
GROUP BY t.payment_method;

## Average Transaction Value per Employee
## This query calculates the average value of transactions handled by each employee. (Complex)

SELECT 
    e.employee_id,
    e.f_name AS employee_first_name,
    e.l_name AS employee_last_name,
    AVG(Transaction.amount_paid) AS average_transaction_value
FROM 
    employee e
JOIN 
    Customer c ON e.employee_id = c.employee_id
JOIN 
    `Order` o ON c.customer_id = o.customer_id
JOIN 
    Transaction ON c.customer_id = Transaction.customer_id
GROUP BY 
    e.employee_id
ORDER BY 
    average_transaction_value DESC;


## Query to get customers who have ordered more than 1 distinct product and the total amount they've spent:
# 1 = Margherita Pizza, 9 = Coke , 2 = Pepperoni Pizza, 7 = Buffalo Wings

SELECT c.f_name, c.l_name, 
       GROUP_CONCAT(DISTINCT od.product_id ORDER BY od.product_id) AS product_ids_ordered, 
       COUNT(DISTINCT od.product_id) AS distinct_products_ordered, 
       SUM(od.total_price * od.quantity) AS total_spent
FROM Customer c
JOIN `Order` o ON c.customer_id = o.customer_id
JOIN `order details` od ON o.order_id = od.order_id
GROUP BY c.customer_id
HAVING COUNT(DISTINCT od.product_id) > 1;


## Revenue Generated per Product (Tracked by Employee)
## This query tracks the total revenue generated by each employee, broken down by each product sold. 
## This can help the manager understand which employees are promoting and selling certain products more effectively.
SELECT e.f_name, e.l_name, p.product_name, 
       SUM(od.total_price * od.quantity) AS total_revenue_generated
FROM employee e
JOIN Customer c ON e.employee_id = c.employee_id
JOIN `Order` o ON c.customer_id = o.customer_id
JOIN `order details` od ON o.order_id = od.order_id
JOIN Product p ON od.product_id = p.Product_id
GROUP BY e.employee_id, p.product_id
ORDER BY total_revenue_generated DESC;

 ##Find the top 3 customers who have spent the most, including the employee who manages them
WITH CustomerSpending AS (
    SELECT c.customer_id, c.f_name, c.l_name, SUM(t.amount_paid) AS total_spent
    FROM Customer c
    JOIN Transaction t ON c.customer_id = t.customer_id
    GROUP BY c.customer_id
)
SELECT cs.customer_id, cs.f_name, cs.l_name, cs.total_spent, e.f_name AS employee_f_name, e.l_name AS employee_l_name
FROM CustomerSpending cs
JOIN Customer c ON cs.customer_id = c.customer_id
JOIN employee e ON c.employee_id = e.employee_id
ORDER BY cs.total_spent DESC
LIMIT 3;


##For each product category, find the percentage of total sales that came from the most popular product
WITH CategorySales AS (
    SELECT p.category, SUM(od.total_price * od.quantity) AS category_total
    FROM Product p
    JOIN order_details od ON p.product_id = od.product_id
    GROUP BY p.category
),
TopProductSales AS (
    SELECT p.category, MAX(od.total_price * od.quantity) AS top_product_sales
    FROM Product p
    JOIN order_details od ON p.product_id = od.product_id
    GROUP BY p.category
)
SELECT cs.category, (tp.top_product_sales / cs.category_total) * 100 AS percentage_from_top_product
FROM CategorySales cs
JOIN TopProductSales tp ON cs.category = tp.category
ORDER BY percentage_from_top_product DESC;
